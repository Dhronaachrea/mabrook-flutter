///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class RegisterWithOtpResponseRamPlayerInfo {
/*
{
  "id": 1385860,
  "merchantId": 1,
  "domainId": 1,
  "playerId": 1,
  "addressVerified": "PENDING",
  "nameVerified": "N",
  "emailVerified": "N",
  "mobileVerified": "Y",
  "ageVerified": "PENDING",
  "taxationIdVerified": "PENDING",
  "securityQuestionVerified": "PENDING",
  "idVerified": "PENDING",
  "bankVerified": "PENDING",
  "addressVerifiedAt": "13/05/2022 02:44:48",
  "profileStatus": "NEW_UPLOAD_PENDING",
  "kycStatus": "REGISTERED",
  "emailVerifiedAt": "13/05/2022 02:44:48",
  "mobileVerifiedAt": "13/05/2022 02:44:48",
  "ageVerifiedAt": "13/05/2022 02:44:48",
  "taxationIdVerifiedAt": "13/05/2022 02:44:48",
  "securityQuestionVerifiedAt": "13/05/2022 02:44:48",
  "idVerifiedAt": "13/05/2022 02:44:48",
  "bankVerifiedAt": "13/05/2022 02:44:48",
  "createdAt": "13/05/2022 02:44:48",
  "updatedAt": "13/05/2022 02:44:48",
  "profileExpiredAt": null,
  "docUploaded": "YES",
  "uploadPendingDate": null,
  "verifiedBy": null,
  "verificationAssignAt": null,
  "verificationModeAt": null,
  "addressVerifiedBy": null,
  "idVerifiedBy": null,
  "bankVerifiedBy": null,
  "isMpinExist": "NO"
}
*/

  int? id;
  int? merchantId;
  int? domainId;
  int? playerId;
  String? addressVerified;
  String? nameVerified;
  String? emailVerified;
  String? mobileVerified;
  String? ageVerified;
  String? taxationIdVerified;
  String? securityQuestionVerified;
  String? idVerified;
  String? bankVerified;
  String? addressVerifiedAt;
  String? profileStatus;
  String? kycStatus;
  String? emailVerifiedAt;
  String? mobileVerifiedAt;
  String? ageVerifiedAt;
  String? taxationIdVerifiedAt;
  String? securityQuestionVerifiedAt;
  String? idVerifiedAt;
  String? bankVerifiedAt;
  String? createdAt;
  String? updatedAt;
  String? profileExpiredAt;
  String? docUploaded;
  String? uploadPendingDate;
  String? verifiedBy;
  String? verificationAssignAt;
  String? verificationModeAt;
  String? addressVerifiedBy;
  String? idVerifiedBy;
  String? bankVerifiedBy;
  String? isMpinExist;

  RegisterWithOtpResponseRamPlayerInfo({
    this.id,
    this.merchantId,
    this.domainId,
    this.playerId,
    this.addressVerified,
    this.nameVerified,
    this.emailVerified,
    this.mobileVerified,
    this.ageVerified,
    this.taxationIdVerified,
    this.securityQuestionVerified,
    this.idVerified,
    this.bankVerified,
    this.addressVerifiedAt,
    this.profileStatus,
    this.kycStatus,
    this.emailVerifiedAt,
    this.mobileVerifiedAt,
    this.ageVerifiedAt,
    this.taxationIdVerifiedAt,
    this.securityQuestionVerifiedAt,
    this.idVerifiedAt,
    this.bankVerifiedAt,
    this.createdAt,
    this.updatedAt,
    this.profileExpiredAt,
    this.docUploaded,
    this.uploadPendingDate,
    this.verifiedBy,
    this.verificationAssignAt,
    this.verificationModeAt,
    this.addressVerifiedBy,
    this.idVerifiedBy,
    this.bankVerifiedBy,
    this.isMpinExist,
  });
  RegisterWithOtpResponseRamPlayerInfo.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toInt();
    merchantId = json['merchantId']?.toInt();
    domainId = json['domainId']?.toInt();
    playerId = json['playerId']?.toInt();
    addressVerified = json['addressVerified']?.toString();
    nameVerified = json['nameVerified']?.toString();
    emailVerified = json['emailVerified']?.toString();
    mobileVerified = json['mobileVerified']?.toString();
    ageVerified = json['ageVerified']?.toString();
    taxationIdVerified = json['taxationIdVerified']?.toString();
    securityQuestionVerified = json['securityQuestionVerified']?.toString();
    idVerified = json['idVerified']?.toString();
    bankVerified = json['bankVerified']?.toString();
    addressVerifiedAt = json['addressVerifiedAt']?.toString();
    profileStatus = json['profileStatus']?.toString();
    kycStatus = json['kycStatus']?.toString();
    emailVerifiedAt = json['emailVerifiedAt']?.toString();
    mobileVerifiedAt = json['mobileVerifiedAt']?.toString();
    ageVerifiedAt = json['ageVerifiedAt']?.toString();
    taxationIdVerifiedAt = json['taxationIdVerifiedAt']?.toString();
    securityQuestionVerifiedAt = json['securityQuestionVerifiedAt']?.toString();
    idVerifiedAt = json['idVerifiedAt']?.toString();
    bankVerifiedAt = json['bankVerifiedAt']?.toString();
    createdAt = json['createdAt']?.toString();
    updatedAt = json['updatedAt']?.toString();
    profileExpiredAt = json['profileExpiredAt']?.toString();
    docUploaded = json['docUploaded']?.toString();
    uploadPendingDate = json['uploadPendingDate']?.toString();
    verifiedBy = json['verifiedBy']?.toString();
    verificationAssignAt = json['verificationAssignAt']?.toString();
    verificationModeAt = json['verificationModeAt']?.toString();
    addressVerifiedBy = json['addressVerifiedBy']?.toString();
    idVerifiedBy = json['idVerifiedBy']?.toString();
    bankVerifiedBy = json['bankVerifiedBy']?.toString();
    isMpinExist = json['isMpinExist']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['merchantId'] = merchantId;
    data['domainId'] = domainId;
    data['playerId'] = playerId;
    data['addressVerified'] = addressVerified;
    data['nameVerified'] = nameVerified;
    data['emailVerified'] = emailVerified;
    data['mobileVerified'] = mobileVerified;
    data['ageVerified'] = ageVerified;
    data['taxationIdVerified'] = taxationIdVerified;
    data['securityQuestionVerified'] = securityQuestionVerified;
    data['idVerified'] = idVerified;
    data['bankVerified'] = bankVerified;
    data['addressVerifiedAt'] = addressVerifiedAt;
    data['profileStatus'] = profileStatus;
    data['kycStatus'] = kycStatus;
    data['emailVerifiedAt'] = emailVerifiedAt;
    data['mobileVerifiedAt'] = mobileVerifiedAt;
    data['ageVerifiedAt'] = ageVerifiedAt;
    data['taxationIdVerifiedAt'] = taxationIdVerifiedAt;
    data['securityQuestionVerifiedAt'] = securityQuestionVerifiedAt;
    data['idVerifiedAt'] = idVerifiedAt;
    data['bankVerifiedAt'] = bankVerifiedAt;
    data['createdAt'] = createdAt;
    data['updatedAt'] = updatedAt;
    data['profileExpiredAt'] = profileExpiredAt;
    data['docUploaded'] = docUploaded;
    data['uploadPendingDate'] = uploadPendingDate;
    data['verifiedBy'] = verifiedBy;
    data['verificationAssignAt'] = verificationAssignAt;
    data['verificationModeAt'] = verificationModeAt;
    data['addressVerifiedBy'] = addressVerifiedBy;
    data['idVerifiedBy'] = idVerifiedBy;
    data['bankVerifiedBy'] = bankVerifiedBy;
    data['isMpinExist'] = isMpinExist;
    return data;
  }
}

class RegisterWithOtpResponsePlayerLoginInfoWalletBean {
/*
{
  "totalBalance": 0,
  "cashBalance": 0,
  "depositBalance": 0,
  "winningBalance": 0,
  "bonusBalance": 0,
  "withdrawableBal": 0,
  "practiceBalance": 0,
  "currency": "KES",
  "currencyDisplayCode": "KES",
  "preferredWallet": "WEAVER",
  "totalDepositBalance": 0,
  "totalWithdrawableBalance": 0
}
*/

  int? totalBalance;
  int? cashBalance;
  int? depositBalance;
  int? winningBalance;
  int? bonusBalance;
  int? withdrawableBal;
  int? practiceBalance;
  String? currency;
  String? currencyDisplayCode;
  String? preferredWallet;
  int? totalDepositBalance;
  int? totalWithdrawableBalance;

  RegisterWithOtpResponsePlayerLoginInfoWalletBean({
    this.totalBalance,
    this.cashBalance,
    this.depositBalance,
    this.winningBalance,
    this.bonusBalance,
    this.withdrawableBal,
    this.practiceBalance,
    this.currency,
    this.currencyDisplayCode,
    this.preferredWallet,
    this.totalDepositBalance,
    this.totalWithdrawableBalance,
  });
  RegisterWithOtpResponsePlayerLoginInfoWalletBean.fromJson(Map<String, dynamic> json) {
    totalBalance = json['totalBalance']?.toInt();
    cashBalance = json['cashBalance']?.toInt();
    depositBalance = json['depositBalance']?.toInt();
    winningBalance = json['winningBalance']?.toInt();
    bonusBalance = json['bonusBalance']?.toInt();
    withdrawableBal = json['withdrawableBal']?.toInt();
    practiceBalance = json['practiceBalance']?.toInt();
    currency = json['currency']?.toString();
    currencyDisplayCode = json['currencyDisplayCode']?.toString();
    preferredWallet = json['preferredWallet']?.toString();
    totalDepositBalance = json['totalDepositBalance']?.toInt();
    totalWithdrawableBalance = json['totalWithdrawableBalance']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['totalBalance'] = totalBalance;
    data['cashBalance'] = cashBalance;
    data['depositBalance'] = depositBalance;
    data['winningBalance'] = winningBalance;
    data['bonusBalance'] = bonusBalance;
    data['withdrawableBal'] = withdrawableBal;
    data['practiceBalance'] = practiceBalance;
    data['currency'] = currency;
    data['currencyDisplayCode'] = currencyDisplayCode;
    data['preferredWallet'] = preferredWallet;
    data['totalDepositBalance'] = totalDepositBalance;
    data['totalWithdrawableBalance'] = totalWithdrawableBalance;
    return data;
  }
}

class RegisterWithOtpResponsePlayerLoginInfo {
/*
{
  "unreadMsgCount": 0,
  "country": "KENYA",
  "walletBean": {
    "totalBalance": 0,
    "cashBalance": 0,
    "depositBalance": 0,
    "winningBalance": 0,
    "bonusBalance": 0,
    "withdrawableBal": 0,
    "practiceBalance": 0,
    "currency": "KES",
    "currencyDisplayCode": "KES",
    "preferredWallet": "WEAVER",
    "totalDepositBalance": 0,
    "totalWithdrawableBalance": 0
  },
  "autoPassword": "N",
  "regDevice": "PC",
  "ageVerified": "PENDING",
  "lastLoginDate": "2022-05-13 08:14:48.0",
  "firstLoginDate": "2022-05-13 08:14:47.0",
  "countryCode": "KE",
  "playerType": "FREE",
  "registrationDate": "2022-05-13 08:14:47.0",
  "state": "",
  "playerStatus": "FULL",
  "referSource": "NONE",
  "addressVerified": "PENDING",
  "playerId": 7,
  "affilateId": 1,
  "referFriendCode": "C7J3D",
  "phoneVerified": "Y",
  "avatarPath": "/playerImages/edit-thumbnai.jpg",
  "mobileNo": "787856354",
  "userName": "787856354",
  "registrationIp": "10.160.10.23",
  "olaPlayer": "Yes",
  "lastLoginIP": "10.160.10.23",
  "isPlay2x": "YES",
  "emailVerified": "N",
  "commonContentPath": "https://mabrook/WeaverDoc/commonContent/Mabrook",
  "firstDepositDate": ""
}
*/

  int? unreadMsgCount;
  String? country;
  RegisterWithOtpResponsePlayerLoginInfoWalletBean? walletBean;
  String? autoPassword;
  String? regDevice;
  String? ageVerified;
  String? lastLoginDate;
  String? firstLoginDate;
  String? countryCode;
  String? playerType;
  String? registrationDate;
  String? state;
  String? playerStatus;
  String? referSource;
  String? addressVerified;
  int? playerId;
  int? affilateId;
  String? referFriendCode;
  String? phoneVerified;
  String? avatarPath;
  String? mobileNo;
  String? userName;
  String? registrationIp;
  String? olaPlayer;
  String? lastLoginIP;
  String? isPlay2x;
  String? emailVerified;
  String? commonContentPath;
  String? firstDepositDate;

  RegisterWithOtpResponsePlayerLoginInfo({
    this.unreadMsgCount,
    this.country,
    this.walletBean,
    this.autoPassword,
    this.regDevice,
    this.ageVerified,
    this.lastLoginDate,
    this.firstLoginDate,
    this.countryCode,
    this.playerType,
    this.registrationDate,
    this.state,
    this.playerStatus,
    this.referSource,
    this.addressVerified,
    this.playerId,
    this.affilateId,
    this.referFriendCode,
    this.phoneVerified,
    this.avatarPath,
    this.mobileNo,
    this.userName,
    this.registrationIp,
    this.olaPlayer,
    this.lastLoginIP,
    this.isPlay2x,
    this.emailVerified,
    this.commonContentPath,
    this.firstDepositDate,
  });
  RegisterWithOtpResponsePlayerLoginInfo.fromJson(Map<String, dynamic> json) {
    unreadMsgCount = json['unreadMsgCount']?.toInt();
    country = json['country']?.toString();
    walletBean = (json['walletBean'] != null) ? RegisterWithOtpResponsePlayerLoginInfoWalletBean.fromJson(json['walletBean']) : null;
    autoPassword = json['autoPassword']?.toString();
    regDevice = json['regDevice']?.toString();
    ageVerified = json['ageVerified']?.toString();
    lastLoginDate = json['lastLoginDate']?.toString();
    firstLoginDate = json['firstLoginDate']?.toString();
    countryCode = json['countryCode']?.toString();
    playerType = json['playerType']?.toString();
    registrationDate = json['registrationDate']?.toString();
    state = json['state']?.toString();
    playerStatus = json['playerStatus']?.toString();
    referSource = json['referSource']?.toString();
    addressVerified = json['addressVerified']?.toString();
    playerId = json['playerId']?.toInt();
    affilateId = json['affilateId']?.toInt();
    referFriendCode = json['referFriendCode']?.toString();
    phoneVerified = json['phoneVerified']?.toString();
    avatarPath = json['avatarPath']?.toString();
    mobileNo = json['mobileNo']?.toString();
    userName = json['userName']?.toString();
    registrationIp = json['registrationIp']?.toString();
    olaPlayer = json['olaPlayer']?.toString();
    lastLoginIP = json['lastLoginIP']?.toString();
    isPlay2x = json['isPlay2x']?.toString();
    emailVerified = json['emailVerified']?.toString();
    commonContentPath = json['commonContentPath']?.toString();
    firstDepositDate = json['firstDepositDate']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['unreadMsgCount'] = unreadMsgCount;
    data['country'] = country;
    if (walletBean != null) {
      data['walletBean'] = walletBean!.toJson();
    }
    data['autoPassword'] = autoPassword;
    data['regDevice'] = regDevice;
    data['ageVerified'] = ageVerified;
    data['lastLoginDate'] = lastLoginDate;
    data['firstLoginDate'] = firstLoginDate;
    data['countryCode'] = countryCode;
    data['playerType'] = playerType;
    data['registrationDate'] = registrationDate;
    data['state'] = state;
    data['playerStatus'] = playerStatus;
    data['referSource'] = referSource;
    data['addressVerified'] = addressVerified;
    data['playerId'] = playerId;
    data['affilateId'] = affilateId;
    data['referFriendCode'] = referFriendCode;
    data['phoneVerified'] = phoneVerified;
    data['avatarPath'] = avatarPath;
    data['mobileNo'] = mobileNo;
    data['userName'] = userName;
    data['registrationIp'] = registrationIp;
    data['olaPlayer'] = olaPlayer;
    data['lastLoginIP'] = lastLoginIP;
    data['isPlay2x'] = isPlay2x;
    data['emailVerified'] = emailVerified;
    data['commonContentPath'] = commonContentPath;
    data['firstDepositDate'] = firstDepositDate;
    return data;
  }
}

class RegisterWithOtpResponseMapping {
/*
{}
*/
  //RegisterWithOtpResponseMapping({});
  RegisterWithOtpResponseMapping.fromJson(Map<String, dynamic> json) {}
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    return data;
  }
}

class RegisterWithOtpResponse {
/*
{
  "firstDepositCampTrackId": 0,
  "mapping": {},
  "domainName": "Mabrook",
  "firstDepositReferSource": "",
  "playerLoginInfo": {
    "unreadMsgCount": 0,
    "country": "KENYA",
    "walletBean": {
      "totalBalance": 0,
      "cashBalance": 0,
      "depositBalance": 0,
      "winningBalance": 0,
      "bonusBalance": 0,
      "withdrawableBal": 0,
      "practiceBalance": 0,
      "currency": "KES",
      "currencyDisplayCode": "KES",
      "preferredWallet": "WEAVER",
      "totalDepositBalance": 0,
      "totalWithdrawableBalance": 0
    },
    "autoPassword": "N",
    "regDevice": "PC",
    "ageVerified": "PENDING",
    "lastLoginDate": "2022-05-13 08:14:48.0",
    "firstLoginDate": "2022-05-13 08:14:47.0",
    "countryCode": "KE",
    "playerType": "FREE",
    "registrationDate": "2022-05-13 08:14:47.0",
    "state": "",
    "playerStatus": "FULL",
    "referSource": "NONE",
    "addressVerified": "PENDING",
    "playerId": 7,
    "affilateId": 1,
    "referFriendCode": "C7J3D",
    "phoneVerified": "Y",
    "avatarPath": "/playerImages/edit-thumbnai.jpg",
    "mobileNo": "787856354",
    "userName": "787856354",
    "registrationIp": "10.160.10.23",
    "olaPlayer": "Yes",
    "lastLoginIP": "10.160.10.23",
    "isPlay2x": "YES",
    "emailVerified": "N",
    "commonContentPath": "https://mabrook/WeaverDoc/commonContent/Mabrook",
    "firstDepositDate": ""
  },
  "rummyDeepLink": "",
  "firstDepositReferSourceId": 0,
  "profileStatus": "NEW_UPLOAD_PENDING",
  "errorCode": 0,
  "firstDepositSubSourceId": 0,
  "ramPlayerInfo": {
    "id": 1385860,
    "merchantId": 1,
    "domainId": 1,
    "playerId": 1,
    "addressVerified": "PENDING",
    "nameVerified": "N",
    "emailVerified": "N",
    "mobileVerified": "Y",
    "ageVerified": "PENDING",
    "taxationIdVerified": "PENDING",
    "securityQuestionVerified": "PENDING",
    "idVerified": "PENDING",
    "bankVerified": "PENDING",
    "addressVerifiedAt": "13/05/2022 02:44:48",
    "profileStatus": "NEW_UPLOAD_PENDING",
    "kycStatus": "REGISTERED",
    "emailVerifiedAt": "13/05/2022 02:44:48",
    "mobileVerifiedAt": "13/05/2022 02:44:48",
    "ageVerifiedAt": "13/05/2022 02:44:48",
    "taxationIdVerifiedAt": "13/05/2022 02:44:48",
    "securityQuestionVerifiedAt": "13/05/2022 02:44:48",
    "idVerifiedAt": "13/05/2022 02:44:48",
    "bankVerifiedAt": "13/05/2022 02:44:48",
    "createdAt": "13/05/2022 02:44:48",
    "updatedAt": "13/05/2022 02:44:48",
    "profileExpiredAt": null,
    "docUploaded": "YES",
    "uploadPendingDate": null,
    "verifiedBy": null,
    "verificationAssignAt": null,
    "verificationModeAt": null,
    "addressVerifiedBy": null,
    "idVerifiedBy": null,
    "bankVerifiedBy": null,
    "isMpinExist": "NO"
  },
  "playerToken": "0b30c38ceb2cffdc658f3f31421a9087"
}
*/

  int? firstDepositCampTrackId;
  RegisterWithOtpResponseMapping? mapping;
  String? domainName;
  String? firstDepositReferSource;
  RegisterWithOtpResponsePlayerLoginInfo? playerLoginInfo;
  String? rummyDeepLink;
  int? firstDepositReferSourceId;
  String? profileStatus;
  int? errorCode;
  String? errorMessage;
  int? firstDepositSubSourceId;
  RegisterWithOtpResponseRamPlayerInfo? ramPlayerInfo;
  String? playerToken;

  RegisterWithOtpResponse({
    this.firstDepositCampTrackId,
    this.mapping,
    this.domainName,
    this.firstDepositReferSource,
    this.playerLoginInfo,
    this.rummyDeepLink,
    this.firstDepositReferSourceId,
    this.profileStatus,
    this.errorCode,
    this.errorMessage,
    this.firstDepositSubSourceId,
    this.ramPlayerInfo,
    this.playerToken,
  });
  RegisterWithOtpResponse.fromJson(Map<String, dynamic> json) {
    firstDepositCampTrackId = json['firstDepositCampTrackId']?.toInt();
    mapping = (json['mapping'] != null) ? RegisterWithOtpResponseMapping.fromJson(json['mapping']) : null;
    domainName = json['domainName']?.toString();
    firstDepositReferSource = json['firstDepositReferSource']?.toString();
    playerLoginInfo = (json['playerLoginInfo'] != null) ? RegisterWithOtpResponsePlayerLoginInfo.fromJson(json['playerLoginInfo']) : null;
    rummyDeepLink = json['rummyDeepLink']?.toString();
    firstDepositReferSourceId = json['firstDepositReferSourceId']?.toInt();
    profileStatus = json['profileStatus']?.toString();
    errorCode = json['errorCode']?.toInt();
    errorMessage = json['errorMessage']?.toString();
    firstDepositSubSourceId = json['firstDepositSubSourceId']?.toInt();
    ramPlayerInfo = (json['ramPlayerInfo'] != null) ? RegisterWithOtpResponseRamPlayerInfo.fromJson(json['ramPlayerInfo']) : null;
    playerToken = json['playerToken']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['firstDepositCampTrackId'] = firstDepositCampTrackId;
    if (mapping != null) {
      data['mapping'] = mapping!.toJson();
    }
    data['domainName'] = domainName;
    data['firstDepositReferSource'] = firstDepositReferSource;
    if (playerLoginInfo != null) {
      data['playerLoginInfo'] = playerLoginInfo!.toJson();
    }
    data['rummyDeepLink'] = rummyDeepLink;
    data['firstDepositReferSourceId'] = firstDepositReferSourceId;
    data['profileStatus'] = profileStatus;
    data['errorCode'] = errorCode;
    data['errorMessage'] = errorMessage;
    data['firstDepositSubSourceId'] = firstDepositSubSourceId;
    if (ramPlayerInfo != null) {
      data['ramPlayerInfo'] = ramPlayerInfo!.toJson();
    }
    data['playerToken'] = playerToken;
    return data;
  }
}
